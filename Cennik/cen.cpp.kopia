/////////////////////////////////////////////////
/////////////////// Cennik //////////////////////
/////////////////////////////////////////////////
/////////////// Mateusz Bartos //////////////////
//////// http://mbartos.lo3.edu.pl/site /////////
//////////////////// 2012 ///////////////////////
/////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <queue>

#define MAXV 100000 //maksymalna liczba wierzcholkow
#define INFINITY 10000000

using namespace std;

struct node{
    int d;  //oszacowana odleglosc od zrodla
    int u;  //numer wierzcholka

    node(int n=0){
        d=INFINITY;
        u=n;
    }
    bool operator< (const node& x) const{
        return d > x.d;
    }
};

struct edge{
    int v;
    int waga;
};

struct graph{
    int d[MAXV];                //oszacowana odleglosc od zrodla
    int p[MAXV];                //poprzednik w drzewie przeszukiwan
    int vis[MAXV];              //czy przetworzony ?
    int degree[MAXV];           //stopien wierzcholka
    vector<vector<edge> > adj;  //lista sasiedztwa
    int vcount;                 //ilosc wierzcholkow
};

vector<int>needyou;

bool znajdz(int x){
    for(int i = 0; i < needyou.size() ; i++){
        if(needyou[i] == x){
            return true;
        }
    }
    return false;
}

int Dijkstra(graph* G, int s, int destination){ //dijkstra v2.0, w 3,5 minuty
    node tmp, next;
    int nV, nWaga;
    priority_queue<node> Q;

    for(int i=1; i<=G->vcount; ++i){ //ISS; numerowanie wierzcholkow od 1
        Q.push(node(i));
        G->p[i] = G->d[i] = INFINITY;
        G->vis[i]=false;
    }
    G->d[s]=0;
    tmp.u=s;
    tmp.d=0;
    Q.push(tmp);

    while(!Q.empty()){
        tmp=Q.top();
        Q.pop();

        if(!G->vis[tmp.u]){
            G->vis[tmp.u]=true;

            for(int i=0;i<G->degree[tmp.u];++i){
                nV=G->adj[tmp.u][i].v;
                nWaga=G->adj[tmp.u][i].waga;

                if(G->d[nV] > (G->d[tmp.u] + nWaga)){
                    next.u=nV;
                    next.d = G->d[nV] = G->d[tmp.u] + nWaga;
                    G->p[nV]=tmp.u;
                    Q.push(next);
                }
            }
        }
    }
    return G->d[destination];
}

graph city;

int main(){
    ios_base::sync_with_stdio(0);
    int n,m,k,a,b;
    cin>>n>>m>>k>>a>>b;
    city.vcount = n;
    city.adj.resize(100000);

    for(int i=0;i<m;i++){
        int temp,temp2;
        cin>>temp>>temp2;
        edge e1,e2;
        e1.v = temp2;
        e1.waga = a;
        e2.v = temp;
        e2.waga = a;
        city.adj[temp].push_back(e1);
        city.adj[temp2].push_back(e2);
        city.degree[temp]+=1;
        city.degree[temp2]+=1;
    }//for


  for(int i = n; i> 0 ; i-- ){//DLA WSZYSTKICH MIAST
        int war1 = city.adj[i].size();

        for(int j = 0; j < war1; j++){//DLA KA¯DEGO S¥SIADA MIASTA
            war1 = city.adj[i].size();
            int index = city.adj[i][j].v;

            int war2 = city.adj[index].size();
            for(int o = 0; o < war2; o++){//DLA KA¯DEGO S¥SIADA S¥SIADA // k<3
                war2 = city.adj[index].size();


                int war3 = city.adj[i].size();
                for(int l = 0; l < war3; l++ ){//DLA KA¯DEGO S¥SIADA MIASTA
                    war3 = city.adj[i].size();

                    /////////////////////////////
                    // city.adj[index][o].v
                    // S¹siedzi s¹siada miasta
                    /////////////////////////////

                    /////////////////////////////////////////////
                    // city.adj[i][l].v == city.adj[index][o].v
                    // czy i jest już połączone za pomocą kolei z sąsiadem jego sąsiada
                    // przykład: i = 5, l = 0 ; index = 4, o=0;   czy sąsiad miasta 5 nr.0 (czyli 4) jest połączony z sąsiadem miasta sąsiada i (czyli sąsiad index)
                    /////////////////////////////////////////////

                    if((city.adj[i][l].v == city.adj[index][o].v) || (city.adj[index][o].v == i) || (city.adj[index][o].waga == b) || (city.adj[i][l].waga == b) ){
                        needyou.clear();
                    }else{
                    ////////////////////////////////////////////////////////////////
                    // Jeżeli w needyou znajduje się już ten sąsiad
                    ////////////////////////////////////////////////////////////////
                        if(!znajdz(city.adj[index][o].v)){
                            needyou.push_back(city.adj[index][o].v);

                        }//if
                    }//if
                }//for
            }//for

//TODO          //DODAWANIE DO VEKTORA
                for(int z = 0; z < needyou.size();z++){
                    edge e1,e2;
                    e1.v = needyou[z];
                    e1.waga = b;
                    e2.v = i;
                    e2.waga = b;
                    city.adj[i].push_back(e1);
                    city.adj[needyou[z]].push_back(e2);
                    city.degree[i]+=1;
                    city.degree[needyou[z]]+=1;
                }//for
                needyou.clear();
        }//for
    }//for

//    for(int i=1;i<=city.vcount;i++){
  //      for(int j=0;j<city.adj[i].size();j++){
    //        cout<<"MIASTO: "<<i<<"do ";
   //         cout<<city.adj[i][j].v<<" za "<<city.adj[i][j].waga<<"\n";
 //       }//for
 //   }//for


    for(int i=1;i<=city.vcount;i++){
        if(i == k){
            cout<<"0\n";
            continue;
        }//if
        cout<<Dijkstra(&city,k,i)<<"\n";
    }//for


    return 0;
}
